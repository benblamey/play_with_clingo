% cluster datums into events, testing day validity.

% Define
%%%%%%%%%%%
#const n_datums = 3.
#const n_events = 2.
#const n_days = 3.

datum(1..n_datums).
% (we don't know how many events exist yet)
%event(1..n_events).
day(1..n_days).

% Define the possible days for each datum (with probability "costs")
datum_on_day(1,1,2).
datum_on_day(1,2,1).
datum_on_day(1,3,1).

datum_on_day(2,1,0).  % zero probability is a non-existant fact.
datum_on_day(2,2,1).
datum_on_day(2,3,0).  % zero probability is a non-existant fact.

datum_on_day(3,1,1).
datum_on_day(3,2,0).   % zero probability is a non-existant fact.
datum_on_day(3,3,1).

% Define the possible days for each datum (ignoring "costs")
datum_on_day(D,Y) :- datum_on_day(D,Y,C).


% Generate
%%%%%%%%%%%
% Each datum is in exactly one event (datums are clustered into events).
1 { datum_in_event(D,1..n_events) } 1 :- datum(D).

% Create an event for each datum cluster.
event(E) :- datum_in_event(D,E).

% Each event occurs on exactly one day.
1 { event_on_day(E,1..n_days) } 1 :- event(E).

% Test
%%%%%%%%%%%

% An event can only occur on a day when all its datums can occur on that day.
event_on_day(E,Y) :- datum_in_event(D,E) : datum_on_day(D,Y), event(E), day(Y).


% Optimize
%%%%%%%%%%%
%maximize [ datum_in_event(D, E) , datum_on_day(D, Y, C) , day(Y) =  ] .


% Format Output
#hide datum/1.
#hide day/1.
#hide event/1.
#hide datum_on_day/3.
#hide datum_on_day/2.
% cluster datums into events, testing day validity.
% handle impossible days
% choose best day by maximizing event payoff.

% Define
%%%%%%%%%%%
#const n_datums = 3.
#const n_events = 2.
#const n_days = 3.


datum(1..n_datums).
% (we don't know how many events exist yet)
%event(1..n_events).
day(1..n_days).

% Define the possible days for each datum (with probability "costs")
datum_on_day(1,1,4).
datum_on_day(1,2,1).
datum_on_day(1,3,1).

datum_on_day(2,1,0).
datum_on_day(2,2,1).
datum_on_day(2,3,0).

datum_on_day(3,1,2).
datum_on_day(3,2,0).
datum_on_day(3,3,1).

% Define the possible days for each datum
datum_on_day(D,Y) :- datum_on_day(D,Y,C), C > 0.
-datum_on_day(D,Y) :- datum_on_day(D,Y,C), C == 0.

% Generate
%%%%%%%%%%%
% Each datum is in exactly one event (datums are clustered into events).
1 { datum_in_event(D,1..n_events) } 1 :- datum(D).

% Create an event for each datum cluster.
event(E) :- datum_in_event(D,E).

% Each event occurs on exactly one day.
1 { event_on_day(E,1..n_days) } 1 :- event(E).

% Each day has a maximum of one event.
% 0 { event_on_day(_,Y) } 1 :- day(Y).
% :- event_on_day(E2,Y), event_on_day(E1,Y), event(E1), event(E2), E1 != E2, Y==Y.



% Test
%%%%%%%%%%%

% All datums in an event must (be able to) occur on the day of the event.
% Equivalently...
% If *all the datums* (condition) are in some event on some day, all the datums must occur on that day.
datum_on_day(D,Y) :- event(E), day(Y), datum(D), event_on_day(E,Y), datum_in_event(D,E) : datum(D).


% Optimize
%%%%%%%%%%%

%define a cost for each event.
event_cost(E, C) :- C = #sum [ datum_in_event(D,E) : datum_on_day(D,Y,C2) = C2 ], event_on_day(E,Y).

#maximize [ event_cost(E,C) = C ].   % maximize the sum of the payoff.


% Format Output
#hide datum/1.
#hide day/1.
#hide event/1.
#hide datum_on_day/3.
#hide datum_on_day/2.
#hide -datum_on_day/2.
#hide -event_on_day/2.
